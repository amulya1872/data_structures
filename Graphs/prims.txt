import sys
class Graph:
    def __init__(self,v):
        self.v=v
        self.graph=[[0 for i in range(v)]
                    for j in range(v)]
    def min_cost(self,cost,sp):
        min=sys.maxsize
        for v in range(self.v):
            if(cost[v]<min and sp[v]==False):
                min=cost[v]
                min_index=v
        return min_index
    def prims(self):
        parent=[None]*(self.v)
        cost=[sys.maxsize]*(self.v)
        cost[0]=0
        sp=[False]*(self.v)
        parent[0]=-1
        for i in range(self.v):
            u=self.min_cost(cost,sp)
            sp[u]=True
            for v in range(self.v):
                if(self.graph[u][v]>0 and sp[v]==False and cost[v]>self.graph[u][v]):
                    cost[v]=self.graph[u][v]
                    parent[v]=u
        print("Edge", "\tWeight")
        for i in range(1,self.v):
            print(parent[i],"-",i," ",self.graph[i][parent[i]])

g = Graph(5)
g.graph = [[0, 2, 0, 6, 0],
           [2, 0, 3, 8, 5],
           [0, 3, 0, 0, 7],
           [6, 8, 0, 0, 9],
           [0, 5, 7, 9, 0]]

g.prims()