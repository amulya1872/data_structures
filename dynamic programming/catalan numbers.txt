'''Catalan numbers
Many applications:
1) Count the number of expressions containing n pairs of 
parentheses which are correctly matched. For n = 3,
possible expressions are ((())), ()(()), ()()(), (())(), (()()).
2) Count the number of possible Binary Search Trees
 with n keys (See this)
3) Count the number of full binary trees
 (A rooted binary tree is full if every vertex has
 either two children or no children) with n+1 leaves.
3) Given a number n, return the number of ways you 
can draw n chords in a circle with 2 x n points such
 that no 2 chords intersect.
4)Number of ways a convex polygon of n+2 sides can 
split into triangles by connecting vertices.
5)The number of paths with 2n steps on a rectangular 
grid from bottom left, i.e., (n-1, 0) to top right (0, n-1) 
that do not cross above the main diagonal.
6)Number of ways to tile a stairstep shape of height n with
 n rectangles. The following figure illustrates the case 
7)Number of ways to form a “mountain ranges” with n upstrokes
 and n down-strokes that all stay above the original line.
The mountain range interpretation
 is that the mountains will never go below the horizon.
8)Number of stack-sortable permutations of {1, …, n}.
 A permutation w is called stack-sortable if S(w) = (1, …, n),
 where S(w) is defined recursively as follows: 
write w = unv where n is the largest element in w and u and v 
are shorter sequences, and set S(w) = S(u)S(v)n, with S
 being the identity for one-element sequences.
9)Number of permutations of {1, …, n} that avoid the pattern 
123 (or any of the other patterns of length 3); that is, 
the number of permutations with no three-term increasing 
subsequence. For n = 3, these permutations are 132, 213, 231, 
312 and 321. For n = 4, they are 1432, 2143, 2413, 2431, 3142, 
3214, 3241, 3412, 3421, 4132, 4213, 4231, 4312 and 4321


formula=1/(n+1){2nCn}'''








def binomial_coefficient(n,k):
    if(k>n-k):
        k=n-k
    res=1
    for i in range(k):
        res=res*(n-i)
        res=res//(i+1)
    return res
n=int(input())
for i in range(n):
    c=binomial_coefficient(2*i,i)
    k=c//(i+1)
    print(k,end=" ")